// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dnsProto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DomainAddressClient is the client API for DomainAddress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainAddressClient interface {
	Save(ctx context.Context, in *NewDomainAddress, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Address, error)
}

type domainAddressClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainAddressClient(cc grpc.ClientConnInterface) DomainAddressClient {
	return &domainAddressClient{cc}
}

func (c *domainAddressClient) Save(ctx context.Context, in *NewDomainAddress, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dnsProto.DomainAddress/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainAddressClient) Get(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/dnsProto.DomainAddress/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainAddressServer is the server API for DomainAddress service.
// All implementations must embed UnimplementedDomainAddressServer
// for forward compatibility
type DomainAddressServer interface {
	Save(context.Context, *NewDomainAddress) (*empty.Empty, error)
	Get(context.Context, *Domain) (*Address, error)
	mustEmbedUnimplementedDomainAddressServer()
}

// UnimplementedDomainAddressServer must be embedded to have forward compatible implementations.
type UnimplementedDomainAddressServer struct {
}

func (UnimplementedDomainAddressServer) Save(context.Context, *NewDomainAddress) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedDomainAddressServer) Get(context.Context, *Domain) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDomainAddressServer) mustEmbedUnimplementedDomainAddressServer() {}

// UnsafeDomainAddressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainAddressServer will
// result in compilation errors.
type UnsafeDomainAddressServer interface {
	mustEmbedUnimplementedDomainAddressServer()
}

func RegisterDomainAddressServer(s grpc.ServiceRegistrar, srv DomainAddressServer) {
	s.RegisterService(&DomainAddress_ServiceDesc, srv)
}

func _DomainAddress_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDomainAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainAddressServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnsProto.DomainAddress/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainAddressServer).Save(ctx, req.(*NewDomainAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainAddress_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainAddressServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnsProto.DomainAddress/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainAddressServer).Get(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainAddress_ServiceDesc is the grpc.ServiceDesc for DomainAddress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainAddress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnsProto.DomainAddress",
	HandlerType: (*DomainAddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _DomainAddress_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DomainAddress_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns-proto/dns.proto",
}
