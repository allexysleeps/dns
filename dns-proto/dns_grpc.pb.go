// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dnsProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DnsStorageClient is the client API for DnsStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnsStorageClient interface {
	SaveDomainAddress(ctx context.Context, in *NewDomainAddress, opts ...grpc.CallOption) (*Address, error)
	GetDomainAddress(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Address, error)
}

type dnsStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsStorageClient(cc grpc.ClientConnInterface) DnsStorageClient {
	return &dnsStorageClient{cc}
}

func (c *dnsStorageClient) SaveDomainAddress(ctx context.Context, in *NewDomainAddress, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/dnsProto.DnsStorage/SaveDomainAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsStorageClient) GetDomainAddress(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/dnsProto.DnsStorage/GetDomainAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsStorageServer is the server API for DnsStorage service.
// All implementations must embed UnimplementedDnsStorageServer
// for forward compatibility
type DnsStorageServer interface {
	SaveDomainAddress(context.Context, *NewDomainAddress) (*Address, error)
	GetDomainAddress(context.Context, *Domain) (*Address, error)
	mustEmbedUnimplementedDnsStorageServer()
}

// UnimplementedDnsStorageServer must be embedded to have forward compatible implementations.
type UnimplementedDnsStorageServer struct {
}

func (UnimplementedDnsStorageServer) SaveDomainAddress(context.Context, *NewDomainAddress) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDomainAddress not implemented")
}
func (UnimplementedDnsStorageServer) GetDomainAddress(context.Context, *Domain) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainAddress not implemented")
}
func (UnimplementedDnsStorageServer) mustEmbedUnimplementedDnsStorageServer() {}

// UnsafeDnsStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsStorageServer will
// result in compilation errors.
type UnsafeDnsStorageServer interface {
	mustEmbedUnimplementedDnsStorageServer()
}

func RegisterDnsStorageServer(s grpc.ServiceRegistrar, srv DnsStorageServer) {
	s.RegisterService(&DnsStorage_ServiceDesc, srv)
}

func _DnsStorage_SaveDomainAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDomainAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsStorageServer).SaveDomainAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnsProto.DnsStorage/SaveDomainAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsStorageServer).SaveDomainAddress(ctx, req.(*NewDomainAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsStorage_GetDomainAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsStorageServer).GetDomainAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnsProto.DnsStorage/GetDomainAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsStorageServer).GetDomainAddress(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

// DnsStorage_ServiceDesc is the grpc.ServiceDesc for DnsStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnsStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnsProto.DnsStorage",
	HandlerType: (*DnsStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveDomainAddress",
			Handler:    _DnsStorage_SaveDomainAddress_Handler,
		},
		{
			MethodName: "GetDomainAddress",
			Handler:    _DnsStorage_GetDomainAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns-proto/dns.proto",
}
